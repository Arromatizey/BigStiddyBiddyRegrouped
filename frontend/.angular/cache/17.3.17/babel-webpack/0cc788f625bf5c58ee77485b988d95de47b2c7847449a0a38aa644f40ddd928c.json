{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RoomsService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n  }\n  createRoom(room) {\n    return this.http.post(`${this.baseUrl}/rooms`, room);\n  }\n  getRooms() {\n    // TODO: Backend doesn't expose GET /api/rooms yet, using mock data\n    return new Observable(observer => {\n      setTimeout(() => {\n        const mockRooms = [{\n          id: '1',\n          subject: 'Mathématiques',\n          level: 'Intermédiaire',\n          topic: 'Calcul différentiel',\n          institution: 'Université Paris',\n          focusDuration: 25,\n          breakDuration: 5,\n          isActive: true,\n          timerRunning: false,\n          isOnBreak: false\n        }, {\n          id: '2',\n          subject: 'Physique',\n          level: 'Avancé',\n          topic: 'Mécanique quantique',\n          institution: 'École Polytechnique',\n          focusDuration: 30,\n          breakDuration: 10,\n          isActive: true,\n          timerRunning: true,\n          isOnBreak: false\n        }];\n        observer.next(mockRooms);\n        observer.complete();\n      }, 1000);\n    });\n  }\n  updateTheme(roomId, themeConfig) {\n    return this.http.patch(`${this.baseUrl}/rooms/${roomId}/theme`, themeConfig);\n  }\n  updateDurations(roomId, request) {\n    return this.http.patch(`${this.baseUrl}/rooms/${roomId}/durations`, request);\n  }\n  joinRoom(roomId, userId) {\n    return this.http.post(`${this.baseUrl}/rooms/${roomId}/join?userId=${userId}`, {});\n  }\n  // Timer controls\n  startTimer(roomId) {\n    return this.http.post(`${this.baseUrl}/timer/${roomId}/start`, {});\n  }\n  pauseTimer(roomId) {\n    return this.http.post(`${this.baseUrl}/timer/${roomId}/pause`, {});\n  }\n  resumeTimer(roomId) {\n    return this.http.post(`${this.baseUrl}/timer/${roomId}/resume`, {});\n  }\n  resetTimer(roomId) {\n    return this.http.post(`${this.baseUrl}/timer/${roomId}/reset`, {});\n  }\n  static {\n    this.ɵfac = function RoomsService_Factory(t) {\n      return new (t || RoomsService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RoomsService,\n      factory: RoomsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Observable","environment","RoomsService","constructor","http","baseUrl","apiUrl","createRoom","room","post","getRooms","observer","setTimeout","mockRooms","id","subject","level","topic","institution","focusDuration","breakDuration","isActive","timerRunning","isOnBreak","next","complete","updateTheme","roomId","themeConfig","patch","updateDurations","request","joinRoom","userId","startTimer","pauseTimer","resumeTimer","resetTimer","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mehdi Chedad\\BigStiddyBiddyRegrouped\\frontend\\src\\app\\rooms\\rooms.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { Room, RoomDurationUpdateRequest } from '../shared/models/room.models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RoomsService {\r\n  private baseUrl = environment.apiUrl;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  createRoom(room: Room): Observable<string> {\r\n    return this.http.post<string>(`${this.baseUrl}/rooms`, room);\r\n  }\r\n\r\n  getRooms(): Observable<Room[]> {\r\n    // TODO: Backend doesn't expose GET /api/rooms yet, using mock data\r\n    return new Observable(observer => {\r\n      setTimeout(() => {\r\n        const mockRooms: Room[] = [\r\n          {\r\n            id: '1',\r\n            subject: 'Mathématiques',\r\n            level: 'Intermédiaire',\r\n            topic: 'Calcul différentiel',\r\n            institution: 'Université Paris',\r\n            focusDuration: 25,\r\n            breakDuration: 5,\r\n            isActive: true,\r\n            timerRunning: false,\r\n            isOnBreak: false\r\n          },\r\n          {\r\n            id: '2',\r\n            subject: 'Physique',\r\n            level: 'Avancé',\r\n            topic: 'Mécanique quantique',\r\n            institution: 'École Polytechnique',\r\n            focusDuration: 30,\r\n            breakDuration: 10,\r\n            isActive: true,\r\n            timerRunning: true,\r\n            isOnBreak: false\r\n          }\r\n        ];\r\n        observer.next(mockRooms);\r\n        observer.complete();\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  updateTheme(roomId: string, themeConfig: string): Observable<void> {\r\n    return this.http.patch<void>(`${this.baseUrl}/rooms/${roomId}/theme`, themeConfig);\r\n  }\r\n\r\n  updateDurations(roomId: string, request: RoomDurationUpdateRequest): Observable<void> {\r\n    return this.http.patch<void>(`${this.baseUrl}/rooms/${roomId}/durations`, request);\r\n  }\r\n\r\n  joinRoom(roomId: string, userId: string): Observable<void> {\r\n    return this.http.post<void>(`${this.baseUrl}/rooms/${roomId}/join?userId=${userId}`, {});\r\n  }\r\n\r\n  // Timer controls\r\n  startTimer(roomId: string): Observable<void> {\r\n    return this.http.post<void>(`${this.baseUrl}/timer/${roomId}/start`, {});\r\n  }\r\n\r\n  pauseTimer(roomId: string): Observable<void> {\r\n    return this.http.post<void>(`${this.baseUrl}/timer/${roomId}/pause`, {});\r\n  }\r\n\r\n  resumeTimer(roomId: string): Observable<void> {\r\n    return this.http.post<void>(`${this.baseUrl}/timer/${roomId}/resume`, {});\r\n  }\r\n\r\n  resetTimer(roomId: string): Observable<void> {\r\n    return this.http.post<void>(`${this.baseUrl}/timer/${roomId}/reset`, {});\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}