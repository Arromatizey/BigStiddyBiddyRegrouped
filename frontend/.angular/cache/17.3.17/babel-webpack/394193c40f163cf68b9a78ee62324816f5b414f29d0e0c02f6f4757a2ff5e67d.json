{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = environment.apiUrl;\n    this.tokenSubject = new BehaviorSubject(localStorage.getItem('token'));\n    this.userIdSubject = new BehaviorSubject(localStorage.getItem('userId'));\n    this.token$ = this.tokenSubject.asObservable();\n    this.userId$ = this.userIdSubject.asObservable();\n  }\n  register(request) {\n    return this.http.post(`${this.baseUrl}/auth/register`, request, {\n      responseType: 'text'\n    });\n  }\n  login(request) {\n    return this.http.post(`${this.baseUrl}/auth/login`, request).pipe(tap(response => {\n      console.log('üîç Full auth response:', response);\n      console.log('üîë Token:', response.token);\n      console.log('üë§ User ID:', response.id);\n      console.log('‚ùì Is ID null/undefined?', response.id === null || response.id === undefined);\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('userId', response.id);\n      this.tokenSubject.next(response.token);\n      this.userIdSubject.next(response.id);\n      console.log('üíæ Stored token:', localStorage.getItem('token'));\n      console.log('üíæ Stored userId:', localStorage.getItem('userId'));\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userId');\n    this.tokenSubject.next(null);\n    this.userIdSubject.next(null);\n    this.router.navigate(['/']);\n  }\n  forgotPassword(email) {\n    return this.http.post(`${this.baseUrl.replace('/api', '')}/auth/forgot-password`, {\n      email\n    }, {\n      responseType: 'text'\n    });\n  }\n  resetPassword(request) {\n    return this.http.post(`${this.baseUrl.replace('/api', '')}/auth/reset-password`, request, {\n      responseType: 'text'\n    });\n  }\n  isAuthenticated() {\n    return this.getToken() !== null;\n  }\n  getCurrentUserId() {\n    return this.userIdSubject.value;\n  }\n  getToken() {\n    return this.tokenSubject.value;\n  }\n  static {\n    this.…µfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.…µ…µinject(i1.HttpClient), i0.…µ…µinject(i2.Router));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: AuthService,\n      factory: AuthService.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","environment","AuthService","constructor","http","router","baseUrl","apiUrl","tokenSubject","localStorage","getItem","userIdSubject","token$","asObservable","userId$","register","request","post","responseType","login","pipe","response","console","log","token","id","undefined","setItem","next","logout","removeItem","navigate","forgotPassword","email","replace","resetPassword","isAuthenticated","getToken","getCurrentUserId","value","i0","…µ…µinject","i1","HttpClient","i2","Router","factory","…µfac","providedIn"],"sources":["C:\\Users\\Mehdi Chedad\\BigStiddyBiddyRegrouped\\frontend\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\nimport { environment } from '../../environments/environment';\r\nimport { LoginRequest, RegisterRequest, AuthResponse, ResetPasswordRequest } from '../shared/models/auth.models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private baseUrl = environment.apiUrl;\r\n  private tokenSubject = new BehaviorSubject<string | null>(localStorage.getItem('token'));\r\n  private userIdSubject = new BehaviorSubject<string | null>(localStorage.getItem('userId'));\r\n\r\n  public token$ = this.tokenSubject.asObservable();\r\n  public userId$ = this.userIdSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n\r\n  register(request: RegisterRequest): Observable<string> {\r\n    return this.http.post(`${this.baseUrl}/auth/register`, request, { responseType: 'text' });\r\n  }\r\n\r\n  login(request: LoginRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.baseUrl}/auth/login`, request)\r\n      .pipe(\r\n        tap(response => {\r\n          console.log('üîç Full auth response:', response);\r\n          console.log('üîë Token:', response.token);\r\n          console.log('üë§ User ID:', response.id);\r\n          console.log('‚ùì Is ID null/undefined?', response.id === null || response.id === undefined);\r\n          \r\n          localStorage.setItem('token', response.token);\r\n          localStorage.setItem('userId', response.id);\r\n          this.tokenSubject.next(response.token);\r\n          this.userIdSubject.next(response.id);\r\n          \r\n          console.log('üíæ Stored token:', localStorage.getItem('token'));\r\n          console.log('üíæ Stored userId:', localStorage.getItem('userId'));\r\n        })\r\n      );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userId');\r\n    this.tokenSubject.next(null);\r\n    this.userIdSubject.next(null);\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  forgotPassword(email: string): Observable<string> {\r\n    return this.http.post(`${this.baseUrl.replace('/api', '')}/auth/forgot-password`, { email }, { responseType: 'text' });\r\n  }\r\n\r\n  resetPassword(request: ResetPasswordRequest): Observable<string> {\r\n    return this.http.post(`${this.baseUrl.replace('/api', '')}/auth/reset-password`, request, { responseType: 'text' });\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.getToken() !== null;\r\n  }\r\n\r\n  getCurrentUserId(): string | null {\r\n    return this.userIdSubject.value;\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return this.tokenSubject.value;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}