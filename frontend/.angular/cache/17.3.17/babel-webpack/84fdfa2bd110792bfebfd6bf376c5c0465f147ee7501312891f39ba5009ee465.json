{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n    this.tokenSubject = new BehaviorSubject(localStorage.getItem('token'));\n    this.userIdSubject = new BehaviorSubject(localStorage.getItem('userId'));\n    this.token$ = this.tokenSubject.asObservable();\n    this.userId$ = this.userIdSubject.asObservable();\n  }\n  register(request) {\n    return this.http.post(`${this.baseUrl}/auth/register`, request);\n  }\n  login(request) {\n    return this.http.post(`${this.baseUrl}/auth/login`, request).pipe(tap(response => {\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('userId', response.id);\n      this.tokenSubject.next(response.token);\n      this.userIdSubject.next(response.id);\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userId');\n    this.tokenSubject.next(null);\n    this.userIdSubject.next(null);\n  }\n  forgotPassword(email) {\n    return this.http.post('/auth/forgot-password', {\n      email\n    });\n  }\n  resetPassword(token, newPassword) {\n    return this.http.post('/auth/reset-password', {\n      token,\n      newPassword\n    });\n  }\n  isAuthenticated() {\n    return !!this.tokenSubject.value;\n  }\n  getCurrentUserId() {\n    return this.userIdSubject.value;\n  }\n  getToken() {\n    return this.tokenSubject.value;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","environment","AuthService","constructor","http","baseUrl","apiUrl","tokenSubject","localStorage","getItem","userIdSubject","token$","asObservable","userId$","register","request","post","login","pipe","response","setItem","token","id","next","logout","removeItem","forgotPassword","email","resetPassword","newPassword","isAuthenticated","value","getCurrentUserId","getToken","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mehdi Chedad\\BigStiddyBiddyRegrouped\\frontend\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\nimport { LoginRequest, RegisterRequest, AuthResponse } from '../shared/models/auth.models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private baseUrl = environment.apiUrl;\r\n  private tokenSubject = new BehaviorSubject<string | null>(localStorage.getItem('token'));\r\n  private userIdSubject = new BehaviorSubject<string | null>(localStorage.getItem('userId'));\r\n\r\n  public token$ = this.tokenSubject.asObservable();\r\n  public userId$ = this.userIdSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  register(request: RegisterRequest): Observable<string> {\r\n    return this.http.post<string>(`${this.baseUrl}/auth/register`, request);\r\n  }\r\n\r\n  login(request: LoginRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.baseUrl}/auth/login`, request)\r\n      .pipe(\r\n        tap(response => {\r\n          localStorage.setItem('token', response.token);\r\n          localStorage.setItem('userId', response.id);\r\n          this.tokenSubject.next(response.token);\r\n          this.userIdSubject.next(response.id);\r\n        })\r\n      );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userId');\r\n    this.tokenSubject.next(null);\r\n    this.userIdSubject.next(null);\r\n  }\r\n\r\n  forgotPassword(email: string): Observable<string> {\r\n    return this.http.post<string>('/auth/forgot-password', { email });\r\n  }\r\n\r\n  resetPassword(token: string, newPassword: string): Observable<string> {\r\n    return this.http.post<string>('/auth/reset-password', { token, newPassword });\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.tokenSubject.value;\r\n  }\r\n\r\n  getCurrentUserId(): string | null {\r\n    return this.userIdSubject.value;\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return this.tokenSubject.value;\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,eAAe,QAAQ,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;AACpC,SAASC,WAAW,QAAQ,gCAAgC;;;AAM5D,OAAM,MAAOC,WAAW;EAQtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAPhB,KAAAC,OAAO,GAAGJ,WAAW,CAACK,MAAM;IAC5B,KAAAC,YAAY,GAAG,IAAIR,eAAe,CAAgBS,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;IAChF,KAAAC,aAAa,GAAG,IAAIX,eAAe,CAAgBS,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAEnF,KAAAE,MAAM,GAAG,IAAI,CAACJ,YAAY,CAACK,YAAY,EAAE;IACzC,KAAAC,OAAO,GAAG,IAAI,CAACH,aAAa,CAACE,YAAY,EAAE;EAEX;EAEvCE,QAAQA,CAACC,OAAwB;IAC/B,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAS,GAAG,IAAI,CAACX,OAAO,gBAAgB,EAAEU,OAAO,CAAC;EACzE;EAEAE,KAAKA,CAACF,OAAqB;IACzB,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAe,GAAG,IAAI,CAACX,OAAO,aAAa,EAAEU,OAAO,CAAC,CACvEG,IAAI,CACHlB,GAAG,CAACmB,QAAQ,IAAG;MACbX,YAAY,CAACY,OAAO,CAAC,OAAO,EAAED,QAAQ,CAACE,KAAK,CAAC;MAC7Cb,YAAY,CAACY,OAAO,CAAC,QAAQ,EAAED,QAAQ,CAACG,EAAE,CAAC;MAC3C,IAAI,CAACf,YAAY,CAACgB,IAAI,CAACJ,QAAQ,CAACE,KAAK,CAAC;MACtC,IAAI,CAACX,aAAa,CAACa,IAAI,CAACJ,QAAQ,CAACG,EAAE,CAAC;IACtC,CAAC,CAAC,CACH;EACL;EAEAE,MAAMA,CAAA;IACJhB,YAAY,CAACiB,UAAU,CAAC,OAAO,CAAC;IAChCjB,YAAY,CAACiB,UAAU,CAAC,QAAQ,CAAC;IACjC,IAAI,CAAClB,YAAY,CAACgB,IAAI,CAAC,IAAI,CAAC;IAC5B,IAAI,CAACb,aAAa,CAACa,IAAI,CAAC,IAAI,CAAC;EAC/B;EAEAG,cAAcA,CAACC,KAAa;IAC1B,OAAO,IAAI,CAACvB,IAAI,CAACY,IAAI,CAAS,uBAAuB,EAAE;MAAEW;IAAK,CAAE,CAAC;EACnE;EAEAC,aAAaA,CAACP,KAAa,EAAEQ,WAAmB;IAC9C,OAAO,IAAI,CAACzB,IAAI,CAACY,IAAI,CAAS,sBAAsB,EAAE;MAAEK,KAAK;MAAEQ;IAAW,CAAE,CAAC;EAC/E;EAEAC,eAAeA,CAAA;IACb,OAAO,CAAC,CAAC,IAAI,CAACvB,YAAY,CAACwB,KAAK;EAClC;EAEAC,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACtB,aAAa,CAACqB,KAAK;EACjC;EAEAE,QAAQA,CAAA;IACN,OAAO,IAAI,CAAC1B,YAAY,CAACwB,KAAK;EAChC;;;uBAnDW7B,WAAW,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXnC,WAAW;MAAAoC,OAAA,EAAXpC,WAAW,CAAAqC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}