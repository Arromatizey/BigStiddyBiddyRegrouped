{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RoomsService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n  }\n  createRoom(room) {\n    // Backend returns UUID as JSON string like \"123e4567-e89b-12d3-a456-426614174000\"\n    // We need responseType: 'text' to handle the quoted UUID string\n    return this.http.post(`${this.baseUrl}/rooms`, room, {\n      responseType: 'text'\n    });\n  }\n  getRooms() {\n    // ✅ Real API call - endpoint confirmed to exist in backend\n    return this.http.get(`${this.baseUrl}/rooms/getAllRooms`);\n  }\n  updateTheme(roomId, themeConfig) {\n    return this.http.patch(`${this.baseUrl}/rooms/${roomId}/theme`, themeConfig);\n  }\n  updateDurations(roomId, request) {\n    return this.http.patch(`${this.baseUrl}/rooms/${roomId}/durations`, request);\n  }\n  joinRoom(roomId, userId) {\n    return this.http.post(`${this.baseUrl}/rooms/${roomId}/join?userId=${userId}`, {});\n  }\n  // Timer controls\n  startTimer(roomId) {\n    return this.http.post(`${this.baseUrl}/timer/${roomId}/start`, {});\n  }\n  pauseTimer(roomId) {\n    return this.http.post(`${this.baseUrl}/timer/${roomId}/pause`, {});\n  }\n  resumeTimer(roomId) {\n    return this.http.post(`${this.baseUrl}/timer/${roomId}/resume`, {});\n  }\n  resetTimer(roomId) {\n    return this.http.post(`${this.baseUrl}/timer/${roomId}/reset`, {});\n  }\n  static {\n    this.ɵfac = function RoomsService_Factory(t) {\n      return new (t || RoomsService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RoomsService,\n      factory: RoomsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","RoomsService","constructor","http","baseUrl","apiUrl","createRoom","room","post","responseType","getRooms","get","updateTheme","roomId","themeConfig","patch","updateDurations","request","joinRoom","userId","startTimer","pauseTimer","resumeTimer","resetTimer","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mehdi Chedad\\BigStiddyBiddyRegrouped\\frontend\\src\\app\\rooms\\rooms.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\nimport { Room, RoomDurationUpdateRequest } from '../shared/models/room.models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RoomsService {\r\n  private baseUrl = environment.apiUrl;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  createRoom(room: Room): Observable<string> {\r\n    // Backend returns UUID as JSON string like \"123e4567-e89b-12d3-a456-426614174000\"\r\n    // We need responseType: 'text' to handle the quoted UUID string\r\n    return this.http.post(`${this.baseUrl}/rooms`, room, { responseType: 'text' });\r\n  }\r\n\r\n  getRooms(): Observable<Room[]> {\r\n    // ✅ Real API call - endpoint confirmed to exist in backend\r\n    return this.http.get<Room[]>(`${this.baseUrl}/rooms/getAllRooms`);\r\n  }\r\n\r\n  updateTheme(roomId: string, themeConfig: string): Observable<void> {\r\n    return this.http.patch<void>(`${this.baseUrl}/rooms/${roomId}/theme`, themeConfig);\r\n  }\r\n\r\n  updateDurations(roomId: string, request: RoomDurationUpdateRequest): Observable<void> {\r\n    return this.http.patch<void>(`${this.baseUrl}/rooms/${roomId}/durations`, request);\r\n  }\r\n\r\n  joinRoom(roomId: string, userId: string): Observable<void> {\r\n    return this.http.post<void>(`${this.baseUrl}/rooms/${roomId}/join?userId=${userId}`, {});\r\n  }\r\n\r\n  // Timer controls\r\n  startTimer(roomId: string): Observable<void> {\r\n    return this.http.post<void>(`${this.baseUrl}/timer/${roomId}/start`, {});\r\n  }\r\n\r\n  pauseTimer(roomId: string): Observable<void> {\r\n    return this.http.post<void>(`${this.baseUrl}/timer/${roomId}/pause`, {});\r\n  }\r\n\r\n  resumeTimer(roomId: string): Observable<void> {\r\n    return this.http.post<void>(`${this.baseUrl}/timer/${roomId}/resume`, {});\r\n  }\r\n\r\n  resetTimer(roomId: string): Observable<void> {\r\n    return this.http.post<void>(`${this.baseUrl}/timer/${roomId}/reset`, {});\r\n  }\r\n}\r\n"],"mappings":"AAIA,SAASA,WAAW,QAAQ,gCAAgC;;;AAM5D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAGJ,WAAW,CAACK,MAAM;EAEG;EAEvCC,UAAUA,CAACC,IAAU;IACnB;IACA;IACA,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACJ,OAAO,QAAQ,EAAEG,IAAI,EAAE;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC;EAChF;EAEAC,QAAQA,CAAA;IACN;IACA,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAS,GAAG,IAAI,CAACP,OAAO,oBAAoB,CAAC;EACnE;EAEAQ,WAAWA,CAACC,MAAc,EAAEC,WAAmB;IAC7C,OAAO,IAAI,CAACX,IAAI,CAACY,KAAK,CAAO,GAAG,IAAI,CAACX,OAAO,UAAUS,MAAM,QAAQ,EAAEC,WAAW,CAAC;EACpF;EAEAE,eAAeA,CAACH,MAAc,EAAEI,OAAkC;IAChE,OAAO,IAAI,CAACd,IAAI,CAACY,KAAK,CAAO,GAAG,IAAI,CAACX,OAAO,UAAUS,MAAM,YAAY,EAAEI,OAAO,CAAC;EACpF;EAEAC,QAAQA,CAACL,MAAc,EAAEM,MAAc;IACrC,OAAO,IAAI,CAAChB,IAAI,CAACK,IAAI,CAAO,GAAG,IAAI,CAACJ,OAAO,UAAUS,MAAM,gBAAgBM,MAAM,EAAE,EAAE,EAAE,CAAC;EAC1F;EAEA;EACAC,UAAUA,CAACP,MAAc;IACvB,OAAO,IAAI,CAACV,IAAI,CAACK,IAAI,CAAO,GAAG,IAAI,CAACJ,OAAO,UAAUS,MAAM,QAAQ,EAAE,EAAE,CAAC;EAC1E;EAEAQ,UAAUA,CAACR,MAAc;IACvB,OAAO,IAAI,CAACV,IAAI,CAACK,IAAI,CAAO,GAAG,IAAI,CAACJ,OAAO,UAAUS,MAAM,QAAQ,EAAE,EAAE,CAAC;EAC1E;EAEAS,WAAWA,CAACT,MAAc;IACxB,OAAO,IAAI,CAACV,IAAI,CAACK,IAAI,CAAO,GAAG,IAAI,CAACJ,OAAO,UAAUS,MAAM,SAAS,EAAE,EAAE,CAAC;EAC3E;EAEAU,UAAUA,CAACV,MAAc;IACvB,OAAO,IAAI,CAACV,IAAI,CAACK,IAAI,CAAO,GAAG,IAAI,CAACJ,OAAO,UAAUS,MAAM,QAAQ,EAAE,EAAE,CAAC;EAC1E;;;uBA3CWZ,YAAY,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAZ1B,YAAY;MAAA2B,OAAA,EAAZ3B,YAAY,CAAA4B,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}