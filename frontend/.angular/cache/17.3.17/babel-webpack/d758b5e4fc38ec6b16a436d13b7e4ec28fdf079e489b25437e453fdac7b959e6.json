{"ast":null,"code":"import { of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RoomsService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n  }\n  createRoom(room) {\n    return this.http.post(`${this.baseUrl}/rooms`, room, {\n      responseType: 'text'\n    });\n  }\n  getRooms() {\n    // TODO: Replace with real API call when GET /api/rooms is implemented\n    // return this.http.get<Room[]>(`${this.baseUrl}/rooms`);\n    // Enhanced mock data matching backend Room model exactly\n    const mockRooms = [{\n      id: 'a1b2c3d4-e5f6-7890-abcd-ef1234567890',\n      owner: {\n        id: 'user-123',\n        email: 'alice@example.com',\n        displayName: 'Alice Martin',\n        verified: true,\n        createdAt: '2024-01-15T10:30:00Z'\n      },\n      subject: 'Mathématiques',\n      level: 'Intermédiaire',\n      topic: 'Calcul différentiel et intégral',\n      institution: 'Université Paris Diderot',\n      focusDuration: 25,\n      breakDuration: 5,\n      themeConfig: undefined,\n      isActive: true,\n      createdAt: '2024-01-15T14:20:00Z',\n      timerRunning: false,\n      timerStartedAt: undefined,\n      isOnBreak: false\n    }, {\n      id: 'b2c3d4e5-f6g7-8901-bcde-f23456789012',\n      owner: {\n        id: 'user-456',\n        email: 'bob@example.com',\n        displayName: 'Bob Dupont',\n        verified: true,\n        createdAt: '2024-01-10T09:15:00Z'\n      },\n      subject: 'Physique',\n      level: 'Avancé',\n      topic: 'Mécanique quantique - États superposés',\n      institution: 'École Polytechnique',\n      focusDuration: 30,\n      breakDuration: 10,\n      themeConfig: '{\"theme\": \"dark\", \"color\": \"blue\"}',\n      isActive: true,\n      createdAt: '2024-01-16T16:45:00Z',\n      timerRunning: true,\n      timerStartedAt: '2024-01-16T17:00:00Z',\n      isOnBreak: false\n    }, {\n      id: 'c3d4e5f6-g7h8-9012-cdef-345678901234',\n      owner: {\n        id: 'user-789',\n        email: 'carol@example.com',\n        displayName: 'Caroline Leroy',\n        verified: true,\n        createdAt: '2024-01-12T11:22:00Z'\n      },\n      subject: 'Informatique',\n      level: 'Débutant',\n      topic: 'Algorithmes de tri',\n      institution: 'IUT Paris Descartes',\n      focusDuration: 20,\n      breakDuration: 5,\n      themeConfig: null,\n      isActive: true,\n      createdAt: '2024-01-17T09:30:00Z',\n      timerRunning: false,\n      timerStartedAt: null,\n      isOnBreak: false\n    }];\n    // Simulate HTTP delay to match real API behavior\n    return of(mockRooms).pipe(delay(800));\n  }\n  updateTheme(roomId, themeConfig) {\n    return this.http.patch(`${this.baseUrl}/rooms/${roomId}/theme`, themeConfig);\n  }\n  updateDurations(roomId, request) {\n    return this.http.patch(`${this.baseUrl}/rooms/${roomId}/durations`, request);\n  }\n  joinRoom(roomId, userId) {\n    return this.http.post(`${this.baseUrl}/rooms/${roomId}/join?userId=${userId}`, {});\n  }\n  // Timer controls\n  startTimer(roomId) {\n    return this.http.post(`${this.baseUrl}/timer/${roomId}/start`, {});\n  }\n  pauseTimer(roomId) {\n    return this.http.post(`${this.baseUrl}/timer/${roomId}/pause`, {});\n  }\n  resumeTimer(roomId) {\n    return this.http.post(`${this.baseUrl}/timer/${roomId}/resume`, {});\n  }\n  resetTimer(roomId) {\n    return this.http.post(`${this.baseUrl}/timer/${roomId}/reset`, {});\n  }\n  static {\n    this.ɵfac = function RoomsService_Factory(t) {\n      return new (t || RoomsService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RoomsService,\n      factory: RoomsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["of","delay","environment","RoomsService","constructor","http","baseUrl","apiUrl","createRoom","room","post","responseType","getRooms","mockRooms","id","owner","email","displayName","verified","createdAt","subject","level","topic","institution","focusDuration","breakDuration","themeConfig","undefined","isActive","timerRunning","timerStartedAt","isOnBreak","pipe","updateTheme","roomId","patch","updateDurations","request","joinRoom","userId","startTimer","pauseTimer","resumeTimer","resetTimer","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mehdi Chedad\\BigStiddyBiddyRegrouped\\frontend\\src\\app\\rooms\\rooms.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { delay } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\nimport { Room, RoomDurationUpdateRequest } from '../shared/models/room.models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RoomsService {\r\n  private baseUrl = environment.apiUrl;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  createRoom(room: Room): Observable<string> {\r\n    return this.http.post(`${this.baseUrl}/rooms`, room, { responseType: 'text' });\r\n  }\r\n\r\n  getRooms(): Observable<Room[]> {\r\n    // TODO: Replace with real API call when GET /api/rooms is implemented\r\n    // return this.http.get<Room[]>(`${this.baseUrl}/rooms`);\r\n    \r\n    // Enhanced mock data matching backend Room model exactly\r\n    const mockRooms: Room[] = [\r\n      {\r\n        id: 'a1b2c3d4-e5f6-7890-abcd-ef1234567890',\r\n        owner: {\r\n          id: 'user-123',\r\n          email: 'alice@example.com',\r\n          displayName: 'Alice Martin',\r\n          verified: true,\r\n          createdAt: '2024-01-15T10:30:00Z'\r\n        },\r\n        subject: 'Mathématiques',\r\n        level: 'Intermédiaire',\r\n        topic: 'Calcul différentiel et intégral',\r\n        institution: 'Université Paris Diderot',\r\n        focusDuration: 25,\r\n        breakDuration: 5,\r\n        themeConfig: undefined,\r\n        isActive: true,\r\n        createdAt: '2024-01-15T14:20:00Z',\r\n        timerRunning: false,\r\n        timerStartedAt: undefined,\r\n        isOnBreak: false\r\n      },\r\n      {\r\n        id: 'b2c3d4e5-f6g7-8901-bcde-f23456789012',\r\n        owner: {\r\n          id: 'user-456',\r\n          email: 'bob@example.com',\r\n          displayName: 'Bob Dupont',\r\n          verified: true,\r\n          createdAt: '2024-01-10T09:15:00Z'\r\n        },\r\n        subject: 'Physique',\r\n        level: 'Avancé',\r\n        topic: 'Mécanique quantique - États superposés',\r\n        institution: 'École Polytechnique',\r\n        focusDuration: 30,\r\n        breakDuration: 10,\r\n        themeConfig: '{\"theme\": \"dark\", \"color\": \"blue\"}',\r\n        isActive: true,\r\n        createdAt: '2024-01-16T16:45:00Z',\r\n        timerRunning: true,\r\n        timerStartedAt: '2024-01-16T17:00:00Z',\r\n        isOnBreak: false\r\n      },\r\n      {\r\n        id: 'c3d4e5f6-g7h8-9012-cdef-345678901234',\r\n        owner: {\r\n          id: 'user-789',\r\n          email: 'carol@example.com',\r\n          displayName: 'Caroline Leroy',\r\n          verified: true,\r\n          createdAt: '2024-01-12T11:22:00Z'\r\n        },\r\n        subject: 'Informatique',\r\n        level: 'Débutant',\r\n        topic: 'Algorithmes de tri',\r\n        institution: 'IUT Paris Descartes',\r\n        focusDuration: 20,\r\n        breakDuration: 5,\r\n        themeConfig: null,\r\n        isActive: true,\r\n        createdAt: '2024-01-17T09:30:00Z',\r\n        timerRunning: false,\r\n        timerStartedAt: null,\r\n        isOnBreak: false\r\n      }\r\n    ];\r\n\r\n    // Simulate HTTP delay to match real API behavior\r\n    return of(mockRooms).pipe(delay(800));\r\n  }\r\n\r\n  updateTheme(roomId: string, themeConfig: string): Observable<void> {\r\n    return this.http.patch<void>(`${this.baseUrl}/rooms/${roomId}/theme`, themeConfig);\r\n  }\r\n\r\n  updateDurations(roomId: string, request: RoomDurationUpdateRequest): Observable<void> {\r\n    return this.http.patch<void>(`${this.baseUrl}/rooms/${roomId}/durations`, request);\r\n  }\r\n\r\n  joinRoom(roomId: string, userId: string): Observable<void> {\r\n    return this.http.post<void>(`${this.baseUrl}/rooms/${roomId}/join?userId=${userId}`, {});\r\n  }\r\n\r\n  // Timer controls\r\n  startTimer(roomId: string): Observable<void> {\r\n    return this.http.post<void>(`${this.baseUrl}/timer/${roomId}/start`, {});\r\n  }\r\n\r\n  pauseTimer(roomId: string): Observable<void> {\r\n    return this.http.post<void>(`${this.baseUrl}/timer/${roomId}/pause`, {});\r\n  }\r\n\r\n  resumeTimer(roomId: string): Observable<void> {\r\n    return this.http.post<void>(`${this.baseUrl}/timer/${roomId}/resume`, {});\r\n  }\r\n\r\n  resetTimer(roomId: string): Observable<void> {\r\n    return this.http.post<void>(`${this.baseUrl}/timer/${roomId}/reset`, {});\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,WAAW,QAAQ,gCAAgC;;;AAM5D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAGJ,WAAW,CAACK,MAAM;EAEG;EAEvCC,UAAUA,CAACC,IAAU;IACnB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACJ,OAAO,QAAQ,EAAEG,IAAI,EAAE;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC;EAChF;EAEAC,QAAQA,CAAA;IACN;IACA;IAEA;IACA,MAAMC,SAAS,GAAW,CACxB;MACEC,EAAE,EAAE,sCAAsC;MAC1CC,KAAK,EAAE;QACLD,EAAE,EAAE,UAAU;QACdE,KAAK,EAAE,mBAAmB;QAC1BC,WAAW,EAAE,cAAc;QAC3BC,QAAQ,EAAE,IAAI;QACdC,SAAS,EAAE;OACZ;MACDC,OAAO,EAAE,eAAe;MACxBC,KAAK,EAAE,eAAe;MACtBC,KAAK,EAAE,iCAAiC;MACxCC,WAAW,EAAE,0BAA0B;MACvCC,aAAa,EAAE,EAAE;MACjBC,aAAa,EAAE,CAAC;MAChBC,WAAW,EAAEC,SAAS;MACtBC,QAAQ,EAAE,IAAI;MACdT,SAAS,EAAE,sBAAsB;MACjCU,YAAY,EAAE,KAAK;MACnBC,cAAc,EAAEH,SAAS;MACzBI,SAAS,EAAE;KACZ,EACD;MACEjB,EAAE,EAAE,sCAAsC;MAC1CC,KAAK,EAAE;QACLD,EAAE,EAAE,UAAU;QACdE,KAAK,EAAE,iBAAiB;QACxBC,WAAW,EAAE,YAAY;QACzBC,QAAQ,EAAE,IAAI;QACdC,SAAS,EAAE;OACZ;MACDC,OAAO,EAAE,UAAU;MACnBC,KAAK,EAAE,QAAQ;MACfC,KAAK,EAAE,wCAAwC;MAC/CC,WAAW,EAAE,qBAAqB;MAClCC,aAAa,EAAE,EAAE;MACjBC,aAAa,EAAE,EAAE;MACjBC,WAAW,EAAE,oCAAoC;MACjDE,QAAQ,EAAE,IAAI;MACdT,SAAS,EAAE,sBAAsB;MACjCU,YAAY,EAAE,IAAI;MAClBC,cAAc,EAAE,sBAAsB;MACtCC,SAAS,EAAE;KACZ,EACD;MACEjB,EAAE,EAAE,sCAAsC;MAC1CC,KAAK,EAAE;QACLD,EAAE,EAAE,UAAU;QACdE,KAAK,EAAE,mBAAmB;QAC1BC,WAAW,EAAE,gBAAgB;QAC7BC,QAAQ,EAAE,IAAI;QACdC,SAAS,EAAE;OACZ;MACDC,OAAO,EAAE,cAAc;MACvBC,KAAK,EAAE,UAAU;MACjBC,KAAK,EAAE,oBAAoB;MAC3BC,WAAW,EAAE,qBAAqB;MAClCC,aAAa,EAAE,EAAE;MACjBC,aAAa,EAAE,CAAC;MAChBC,WAAW,EAAE,IAAI;MACjBE,QAAQ,EAAE,IAAI;MACdT,SAAS,EAAE,sBAAsB;MACjCU,YAAY,EAAE,KAAK;MACnBC,cAAc,EAAE,IAAI;MACpBC,SAAS,EAAE;KACZ,CACF;IAED;IACA,OAAO/B,EAAE,CAACa,SAAS,CAAC,CAACmB,IAAI,CAAC/B,KAAK,CAAC,GAAG,CAAC,CAAC;EACvC;EAEAgC,WAAWA,CAACC,MAAc,EAAER,WAAmB;IAC7C,OAAO,IAAI,CAACrB,IAAI,CAAC8B,KAAK,CAAO,GAAG,IAAI,CAAC7B,OAAO,UAAU4B,MAAM,QAAQ,EAAER,WAAW,CAAC;EACpF;EAEAU,eAAeA,CAACF,MAAc,EAAEG,OAAkC;IAChE,OAAO,IAAI,CAAChC,IAAI,CAAC8B,KAAK,CAAO,GAAG,IAAI,CAAC7B,OAAO,UAAU4B,MAAM,YAAY,EAAEG,OAAO,CAAC;EACpF;EAEAC,QAAQA,CAACJ,MAAc,EAAEK,MAAc;IACrC,OAAO,IAAI,CAAClC,IAAI,CAACK,IAAI,CAAO,GAAG,IAAI,CAACJ,OAAO,UAAU4B,MAAM,gBAAgBK,MAAM,EAAE,EAAE,EAAE,CAAC;EAC1F;EAEA;EACAC,UAAUA,CAACN,MAAc;IACvB,OAAO,IAAI,CAAC7B,IAAI,CAACK,IAAI,CAAO,GAAG,IAAI,CAACJ,OAAO,UAAU4B,MAAM,QAAQ,EAAE,EAAE,CAAC;EAC1E;EAEAO,UAAUA,CAACP,MAAc;IACvB,OAAO,IAAI,CAAC7B,IAAI,CAACK,IAAI,CAAO,GAAG,IAAI,CAACJ,OAAO,UAAU4B,MAAM,QAAQ,EAAE,EAAE,CAAC;EAC1E;EAEAQ,WAAWA,CAACR,MAAc;IACxB,OAAO,IAAI,CAAC7B,IAAI,CAACK,IAAI,CAAO,GAAG,IAAI,CAACJ,OAAO,UAAU4B,MAAM,SAAS,EAAE,EAAE,CAAC;EAC3E;EAEAS,UAAUA,CAACT,MAAc;IACvB,OAAO,IAAI,CAAC7B,IAAI,CAACK,IAAI,CAAO,GAAG,IAAI,CAACJ,OAAO,UAAU4B,MAAM,QAAQ,EAAE,EAAE,CAAC;EAC1E;;;uBAlHW/B,YAAY,EAAAyC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAZ5C,YAAY;MAAA6C,OAAA,EAAZ7C,YAAY,CAAA8C,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}