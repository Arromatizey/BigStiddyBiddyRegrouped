{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RoomsService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n  }\n  // M√©thode utilitaire pour cr√©er les headers\n  getHeaders() {\n    const token = localStorage.getItem('token');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    });\n    if (token) {\n      headers = headers.set('Authorization', `Bearer ${token}`);\n    }\n    return headers;\n  }\n  createRoom(room) {\n    console.log('üèóÔ∏è Creating room with payload:', JSON.stringify(room, null, 2));\n    console.log('üåê Request URL:', `${this.baseUrl}/rooms`);\n    console.log('üîß Headers:', this.getHeaders());\n    // Backend returns UUID as JSON string like \"123e4567-e89b-12d3-a456-426614174000\"\n    // We need responseType: 'text' to handle the quoted UUID string\n    return this.http.post(`${this.baseUrl}/rooms`, room, {\n      responseType: 'text',\n      headers: this.getHeaders()\n    }).pipe(tap(response => {\n      console.log('‚úÖ Room created successfully:', response);\n    }), catchError(error => {\n      console.error('‚ùå Error creating room:', error);\n      console.error('üîç Error details:', {\n        status: error.status,\n        statusText: error.statusText,\n        message: error.message,\n        url: error.url\n      });\n      throw error;\n    }));\n  }\n  getRooms() {\n    console.log('üìã Fetching rooms from:', `${this.baseUrl}/rooms/getAllRooms`);\n    // Backend endpoint returns 404, using empty array as fallback\n    return this.http.get(`${this.baseUrl}/rooms/getAllRooms`, {\n      headers: this.getHeaders()\n    }).pipe(tap(rooms => {\n      console.log('‚úÖ Rooms fetched successfully:', rooms);\n    }), catchError(error => {\n      console.warn('‚ö†Ô∏è getAllRooms endpoint not available:', error);\n      console.error('üîç Error details:', {\n        status: error.status,\n        statusText: error.statusText,\n        message: error.message,\n        url: error.url\n      });\n      // Return empty array to prevent app crash\n      return of([]);\n    }));\n  }\n  updateTheme(roomId, themeConfig) {\n    return this.http.patch(`${this.baseUrl}/rooms/${roomId}/theme`, themeConfig, {\n      headers: this.getHeaders()\n    });\n  }\n  updateDurations(roomId, request) {\n    return this.http.patch(`${this.baseUrl}/rooms/${roomId}/durations`, request, {\n      headers: this.getHeaders()\n    });\n  }\n  joinRoom(roomId, userId) {\n    console.log('üö™ Joining room:', roomId, 'with user:', userId);\n    return this.http.post(`${this.baseUrl}/rooms/${roomId}/join?userId=${userId}`, {}, {\n      headers: this.getHeaders()\n    }).pipe(tap(() => {\n      console.log('‚úÖ Successfully joined room:', roomId);\n    }), catchError(error => {\n      console.error('‚ùå Error joining room:', error);\n      throw error;\n    }));\n  }\n  // Timer controls\n  startTimer(roomId) {\n    return this.http.post(`${this.baseUrl}/timer/${roomId}/start`, {}, {\n      headers: this.getHeaders()\n    });\n  }\n  pauseTimer(roomId) {\n    return this.http.post(`${this.baseUrl}/timer/${roomId}/pause`, {}, {\n      headers: this.getHeaders()\n    });\n  }\n  resumeTimer(roomId) {\n    return this.http.post(`${this.baseUrl}/timer/${roomId}/resume`, {}, {\n      headers: this.getHeaders()\n    });\n  }\n  resetTimer(roomId) {\n    return this.http.post(`${this.baseUrl}/timer/${roomId}/reset`, {}, {\n      headers: this.getHeaders()\n    });\n  }\n  static {\n    this.…µfac = function RoomsService_Factory(t) {\n      return new (t || RoomsService)(i0.…µ…µinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: RoomsService,\n      factory: RoomsService.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","of","catchError","tap","environment","RoomsService","constructor","http","baseUrl","apiUrl","getHeaders","token","localStorage","getItem","headers","set","createRoom","room","console","log","JSON","stringify","post","responseType","pipe","response","error","status","statusText","message","url","getRooms","get","rooms","warn","updateTheme","roomId","themeConfig","patch","updateDurations","request","joinRoom","userId","startTimer","pauseTimer","resumeTimer","resetTimer","i0","…µ…µinject","i1","HttpClient","factory","…µfac","providedIn"],"sources":["C:\\Users\\Mehdi Chedad\\BigStiddyBiddyRegrouped\\frontend\\src\\app\\rooms\\rooms.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { Room, RoomDurationUpdateRequest } from '../shared/models/room.models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoomsService {\n  private baseUrl = environment.apiUrl;\n\n  constructor(private http: HttpClient) {}\n\n  // M√©thode utilitaire pour cr√©er les headers\n  private getHeaders(): HttpHeaders {\n    const token = localStorage.getItem('token');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    });\n    \n    if (token) {\n      headers = headers.set('Authorization', `Bearer ${token}`);\n    }\n    \n    return headers;\n  }\n\n  createRoom(room: Room): Observable<string> {\n    console.log('üèóÔ∏è Creating room with payload:', JSON.stringify(room, null, 2));\n    console.log('üåê Request URL:', `${this.baseUrl}/rooms`);\n    console.log('üîß Headers:', this.getHeaders());\n    \n    // Backend returns UUID as JSON string like \"123e4567-e89b-12d3-a456-426614174000\"\n    // We need responseType: 'text' to handle the quoted UUID string\n    return this.http.post(`${this.baseUrl}/rooms`, room, { \n      responseType: 'text',\n      headers: this.getHeaders()\n    }).pipe(\n      tap(response => {\n        console.log('‚úÖ Room created successfully:', response);\n      }),\n      catchError(error => {\n        console.error('‚ùå Error creating room:', error);\n        console.error('üîç Error details:', {\n          status: error.status,\n          statusText: error.statusText,\n          message: error.message,\n          url: error.url\n        });\n        throw error;\n      })\n    );\n  }\n\n  getRooms(): Observable<Room[]> {\n    console.log('üìã Fetching rooms from:', `${this.baseUrl}/rooms/getAllRooms`);\n    \n    // Backend endpoint returns 404, using empty array as fallback\n    return this.http.get<Room[]>(`${this.baseUrl}/rooms/getAllRooms`, {\n      headers: this.getHeaders()\n    }).pipe(\n      tap(rooms => {\n        console.log('‚úÖ Rooms fetched successfully:', rooms);\n      }),\n      catchError(error => {\n        console.warn('‚ö†Ô∏è getAllRooms endpoint not available:', error);\n        console.error('üîç Error details:', {\n          status: error.status,\n          statusText: error.statusText,\n          message: error.message,\n          url: error.url\n        });\n        // Return empty array to prevent app crash\n        return of([]);\n      })\n    );\n  }\n\n  updateTheme(roomId: string, themeConfig: string): Observable<void> {\n    return this.http.patch<void>(`${this.baseUrl}/rooms/${roomId}/theme`, themeConfig, {\n      headers: this.getHeaders()\n    });\n  }\n\n  updateDurations(roomId: string, request: RoomDurationUpdateRequest): Observable<void> {\n    return this.http.patch<void>(`${this.baseUrl}/rooms/${roomId}/durations`, request, {\n      headers: this.getHeaders()\n    });\n  }\n\n  joinRoom(roomId: string, userId: string): Observable<void> {\n    console.log('üö™ Joining room:', roomId, 'with user:', userId);\n    return this.http.post<void>(`${this.baseUrl}/rooms/${roomId}/join?userId=${userId}`, {}, {\n      headers: this.getHeaders()\n    }).pipe(\n      tap(() => {\n        console.log('‚úÖ Successfully joined room:', roomId);\n      }),\n      catchError(error => {\n        console.error('‚ùå Error joining room:', error);\n        throw error;\n      })\n    );\n  }\n\n  // Timer controls\n  startTimer(roomId: string): Observable<void> {\n    return this.http.post<void>(`${this.baseUrl}/timer/${roomId}/start`, {}, {\n      headers: this.getHeaders()\n    });\n  }\n\n  pauseTimer(roomId: string): Observable<void> {\n    return this.http.post<void>(`${this.baseUrl}/timer/${roomId}/pause`, {}, {\n      headers: this.getHeaders()\n    });\n  }\n\n  resumeTimer(roomId: string): Observable<void> {\n    return this.http.post<void>(`${this.baseUrl}/timer/${roomId}/resume`, {}, {\n      headers: this.getHeaders()\n    });\n  }\n\n  resetTimer(roomId: string): Observable<void> {\n    return this.http.post<void>(`${this.baseUrl}/timer/${roomId}/reset`, {}, {\n      headers: this.getHeaders()\n    });\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAASC,WAAW,QAAQ,gCAAgC;;;AAM5D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAGJ,WAAW,CAACK,MAAM;EAEG;EAEvC;EACQC,UAAUA,CAAA;IAChB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIC,OAAO,GAAG,IAAId,WAAW,CAAC;MAC5B,cAAc,EAAE,kBAAkB;MAClC,QAAQ,EAAE;KACX,CAAC;IAEF,IAAIW,KAAK,EAAE;MACTG,OAAO,GAAGA,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;;IAG3D,OAAOG,OAAO;EAChB;EAEAE,UAAUA,CAACC,IAAU;IACnBC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAC7EC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE,GAAG,IAAI,CAACX,OAAO,QAAQ,CAAC;IACvDU,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE,IAAI,CAACT,UAAU,EAAE,CAAC;IAE7C;IACA;IACA,OAAO,IAAI,CAACH,IAAI,CAACe,IAAI,CAAC,GAAG,IAAI,CAACd,OAAO,QAAQ,EAAES,IAAI,EAAE;MACnDM,YAAY,EAAE,MAAM;MACpBT,OAAO,EAAE,IAAI,CAACJ,UAAU;KACzB,CAAC,CAACc,IAAI,CACLrB,GAAG,CAACsB,QAAQ,IAAG;MACbP,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEM,QAAQ,CAAC;IACvD,CAAC,CAAC,EACFvB,UAAU,CAACwB,KAAK,IAAG;MACjBR,OAAO,CAACQ,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CR,OAAO,CAACQ,KAAK,CAAC,mBAAmB,EAAE;QACjCC,MAAM,EAAED,KAAK,CAACC,MAAM;QACpBC,UAAU,EAAEF,KAAK,CAACE,UAAU;QAC5BC,OAAO,EAAEH,KAAK,CAACG,OAAO;QACtBC,GAAG,EAAEJ,KAAK,CAACI;OACZ,CAAC;MACF,MAAMJ,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEAK,QAAQA,CAAA;IACNb,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE,GAAG,IAAI,CAACX,OAAO,oBAAoB,CAAC;IAE3E;IACA,OAAO,IAAI,CAACD,IAAI,CAACyB,GAAG,CAAS,GAAG,IAAI,CAACxB,OAAO,oBAAoB,EAAE;MAChEM,OAAO,EAAE,IAAI,CAACJ,UAAU;KACzB,CAAC,CAACc,IAAI,CACLrB,GAAG,CAAC8B,KAAK,IAAG;MACVf,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEc,KAAK,CAAC;IACrD,CAAC,CAAC,EACF/B,UAAU,CAACwB,KAAK,IAAG;MACjBR,OAAO,CAACgB,IAAI,CAAC,wCAAwC,EAAER,KAAK,CAAC;MAC7DR,OAAO,CAACQ,KAAK,CAAC,mBAAmB,EAAE;QACjCC,MAAM,EAAED,KAAK,CAACC,MAAM;QACpBC,UAAU,EAAEF,KAAK,CAACE,UAAU;QAC5BC,OAAO,EAAEH,KAAK,CAACG,OAAO;QACtBC,GAAG,EAAEJ,KAAK,CAACI;OACZ,CAAC;MACF;MACA,OAAO7B,EAAE,CAAC,EAAE,CAAC;IACf,CAAC,CAAC,CACH;EACH;EAEAkC,WAAWA,CAACC,MAAc,EAAEC,WAAmB;IAC7C,OAAO,IAAI,CAAC9B,IAAI,CAAC+B,KAAK,CAAO,GAAG,IAAI,CAAC9B,OAAO,UAAU4B,MAAM,QAAQ,EAAEC,WAAW,EAAE;MACjFvB,OAAO,EAAE,IAAI,CAACJ,UAAU;KACzB,CAAC;EACJ;EAEA6B,eAAeA,CAACH,MAAc,EAAEI,OAAkC;IAChE,OAAO,IAAI,CAACjC,IAAI,CAAC+B,KAAK,CAAO,GAAG,IAAI,CAAC9B,OAAO,UAAU4B,MAAM,YAAY,EAAEI,OAAO,EAAE;MACjF1B,OAAO,EAAE,IAAI,CAACJ,UAAU;KACzB,CAAC;EACJ;EAEA+B,QAAQA,CAACL,MAAc,EAAEM,MAAc;IACrCxB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEiB,MAAM,EAAE,YAAY,EAAEM,MAAM,CAAC;IAC7D,OAAO,IAAI,CAACnC,IAAI,CAACe,IAAI,CAAO,GAAG,IAAI,CAACd,OAAO,UAAU4B,MAAM,gBAAgBM,MAAM,EAAE,EAAE,EAAE,EAAE;MACvF5B,OAAO,EAAE,IAAI,CAACJ,UAAU;KACzB,CAAC,CAACc,IAAI,CACLrB,GAAG,CAAC,MAAK;MACPe,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEiB,MAAM,CAAC;IACpD,CAAC,CAAC,EACFlC,UAAU,CAACwB,KAAK,IAAG;MACjBR,OAAO,CAACQ,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEA;EACAiB,UAAUA,CAACP,MAAc;IACvB,OAAO,IAAI,CAAC7B,IAAI,CAACe,IAAI,CAAO,GAAG,IAAI,CAACd,OAAO,UAAU4B,MAAM,QAAQ,EAAE,EAAE,EAAE;MACvEtB,OAAO,EAAE,IAAI,CAACJ,UAAU;KACzB,CAAC;EACJ;EAEAkC,UAAUA,CAACR,MAAc;IACvB,OAAO,IAAI,CAAC7B,IAAI,CAACe,IAAI,CAAO,GAAG,IAAI,CAACd,OAAO,UAAU4B,MAAM,QAAQ,EAAE,EAAE,EAAE;MACvEtB,OAAO,EAAE,IAAI,CAACJ,UAAU;KACzB,CAAC;EACJ;EAEAmC,WAAWA,CAACT,MAAc;IACxB,OAAO,IAAI,CAAC7B,IAAI,CAACe,IAAI,CAAO,GAAG,IAAI,CAACd,OAAO,UAAU4B,MAAM,SAAS,EAAE,EAAE,EAAE;MACxEtB,OAAO,EAAE,IAAI,CAACJ,UAAU;KACzB,CAAC;EACJ;EAEAoC,UAAUA,CAACV,MAAc;IACvB,OAAO,IAAI,CAAC7B,IAAI,CAACe,IAAI,CAAO,GAAG,IAAI,CAACd,OAAO,UAAU4B,MAAM,QAAQ,EAAE,EAAE,EAAE;MACvEtB,OAAO,EAAE,IAAI,CAACJ,UAAU;KACzB,CAAC;EACJ;;;uBAzHWL,YAAY,EAAA0C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAZ7C,YAAY;MAAA8C,OAAA,EAAZ9C,YAAY,CAAA+C,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}